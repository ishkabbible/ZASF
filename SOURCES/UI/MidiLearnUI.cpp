// generated by Fast Light User Interface Designer (fluid) version 1.0108
// edited by VDX

#include "MidiLearnUI.h"

#include "../Output/VSTaudiooutput.h"
#include "../Misc/MidiRL.h"

//int* LearningMidi;
//MidiRL* midiRL;

CompData::CompData (){
description = 0;
}


MidiLearnUI::MidiLearnUI (Master *master_){
master = master_;
midiRL = master->theVST->midiRL;
LearningMidi =( master->LearningMidi);
nComp = 0;
ycrt=0;

make_window();

}


void MidiLearnUI::cleanup(){

	if (nComp > 1)
	{
		midilearn->hide();
		delete (midilearn);
		nComp = 0;
		make_window();
	}
}


MidiLearnUI::~MidiLearnUI() {
	midilearn->hide();
	delete (midilearn);
}

void MidiLearnUI::refresh(){

if (master->b_turbo)
	this->SetTurbo();
else 
	this->ClearTurbo();

if (master->b_multiCh)
	this->SetMultiCh();
else
	this->ClearMultiCh();

};

void MidiLearnUI::AddComponent(ParamID *parID){

	//char msg[100];
	//char *msg2;
	
	//sprintf(msg,"Adding component: ");
	//msg2 = strcat(msg, parID->strName);
	//fl_alert((const char*)msg2);

	
	*LearningMidi = 0;
	lblAcq->clear_visible();
	lblAcq2->clear_visible();
	cmdOK->activate();
	cmdAcquire->activate();
	midilearn->redraw();


	//add a new component to the UI
	CompData* cd = new CompData();
			cd->ch = 1;
			//char* strDesc = new char[40];
			//sprintf(strDesc,"Fuckin Description %d",nComp);
			cd->description = parID->strName;
			cd->min = parID->minval;
			cd->max = parID->maxval;
			cd->minmin = parID->minval;
			cd->maxmax = parID->maxval;
			cd->n = nComp;
			cd->ctrl =0;
			cd->en = 1;
	  
			
			//if (nComp==3)
			//components[0]->hide ();
			
			nComp++;
			components[nComp] = new ComponentUI(this,master,0,0,620,30);				
			
			components[nComp]->init (cd);
			cpack->add(components[nComp]);
						
			
			cpack->redraw ();
			midilearn->redraw();
			
	
	//if (nComp > 5) UpdateComponent(parID,2);


}


void MidiLearnUI::AddComponentComplete(ParamID *parID){
*LearningMidi = 0;



	//add a new component to the UI
	CompData* cd = new CompData;
			cd->ch = parID->ch;			
			cd->description = parID->strName;
			cd->min = parID->min;
			cd->max = parID->max;
			cd->minmin = parID->minval;
			cd->maxmax = parID->maxval;
			cd->n = nComp;
			cd->ctrl = parID->ctrl;
			cd->en = parID->enabled;
	  
			
			//if (nComp==3)
			//components[0]->hide ();
			
			nComp++;
			components[nComp] = new ComponentUI(this,master,0,0,620,30);
			components[nComp]->init (cd);
			
			components[nComp]->SetEnable(cd->en);
			
			cpack->add(components[nComp]);
						
			
			cpack->redraw ();			
			midilearn->redraw();
			this->changed(6);



}

void MidiLearnUI::SetTurbo() {
	chkTurbo->value(1);
	master->b_turbo = 1;
	midilearn->redraw();

};

void MidiLearnUI::ClearTurbo() {
	chkTurbo->value(0);
	master->b_turbo = 0;
	midilearn->redraw();

};

void MidiLearnUI::SetMultiCh() {
	chkMultiCh->value(1);
	master->b_multiCh = 1;
	midilearn->redraw();

};

void MidiLearnUI::ClearMultiCh() {
	chkMultiCh->value(0);
	master->b_multiCh = 0;
	midilearn->redraw();
};

void MidiLearnUI::UpdateComponent(ParamID *parID, int n) {

	ComponentUI *compn;
	//n++;
	if (n>nComp-1) return;

	compn = (ComponentUI*)cpack->child(n);

	CompData* cd = new CompData;
			cd->ch = 1;
			//char* strDesc = new char[40];
			//sprintf(strDesc,"Fuckin Description %d",nComp);
			cd->description = parID->strName;
			cd->min = parID->minval;
			cd->max = parID->maxval;
			cd->n = n+1;
			cd->ctrl =1;
			cd->en = 1;

	compn->update(cd);
	cpack->redraw ();
	midilearn->redraw();

	midiRL->updating = 0;
	midiRL->updn = 0;
	(*LearningMidi) = 0;

	lblAcq->clear_visible();
	lblAcq2->clear_visible();
	cmdOK->activate();
	cmdAcquire->activate();
	midilearn->redraw();


}

void MidiLearnUI::Acquire() {

	changed(1); //make red button
			
			lblAcq->set_visible();
			lblAcq2->set_visible();
			cmdOK->deactivate();
			cmdAcquire->deactivate();
			midilearn->redraw();		

}

void MidiLearnUI::cb_cmdAcquire_i(Fl_Button*, void*) {
	
//**********************	
//cmd_Acquire_Click();
//**********************

	changed(1); //make red button
	
			//fl_alert("Please click on a control, to add it to the list...");
			
			lblAcq->set_visible();
			lblAcq2->set_visible();
			cmdOK->deactivate();
			cmdAcquire->deactivate();
			midilearn->redraw();
			
			*LearningMidi = 1;
			



//*****************************************
}


void MidiLearnUI::cb_cmdAcquire(Fl_Button* o, void* v) {
  ((MidiLearnUI*)(o->parent()->user_data()))->cb_cmdAcquire_i(o,v);
}

void MidiLearnUI::cb_cmdOK_i(Fl_Button*, void*) {
//*************************
//cmdOK_click()
//*************************
	//insert breakpoint here
	//*((int*)0) = 98;
	//char* strmsg ;
	//strmsg = new char [100];
	//sprintf(strmsg,"Sample rate = %d",SAMPLE_RATE);
	//fl_alert(strmsg);
	

	int i;
	ComponentUI *compn;

	if (nComp <= 1) {
		//hide();
		return;
	};

	for (i=0; i<nComp-1; i++)
	{	
		compn = (ComponentUI*)cpack->child(i);
		midiRL->UpdateCompPars(i,compn->GetCh(),compn->GetCtrl(),compn->GetMin(),
			compn->GetMax(),compn->GetEnabled());
	}

	this->changed(6);  //make button purple

	//hide();
	
//******************************************************
}
void MidiLearnUI::cb_cmdOK(Fl_Button* o, void* v) {
  ((MidiLearnUI*)(o->parent()->user_data()))->cb_cmdOK_i(o,v);
}

inline void MidiLearnUI::cb_chkTurbo_i(Fl_Check_Button*, void*) {
  //chkTurbo_click;
	if (chkTurbo->value()) SetTurbo();
	else ClearTurbo();
}
void MidiLearnUI::cb_chkTurbo(Fl_Check_Button* o, void* v) {
  ((MidiLearnUI*)(o->parent()->user_data()))->cb_chkTurbo_i(o,v);
}

inline void MidiLearnUI::cb_chkMultiCh_i(Fl_Check_Button*, void*) {
  //chkMultiCh_click;
	if (chkMultiCh->value()) SetMultiCh();
	else ClearMultiCh();
}
void MidiLearnUI::cb_chkMultiCh(Fl_Check_Button* o, void* v) {
  ((MidiLearnUI*)(o->parent()->user_data()))->cb_chkMultiCh_i(o,v);
}


void MidiLearnUI::show() {
	midilearn->show ();
}

void MidiLearnUI::hide() {
	midilearn->hide ();
}


void MidiLearnUI::changed(int color) {
	cmdOK->color((Fl_Color)color);
	midilearn->redraw();
}

ComponentUI::ComponentUI(MidiLearnUI* midilearnui_, Master* master_, int x,int y, int w, int h, const char *label):Fl_Group(x,y,w,h,label){

	midilearnui = midilearnui_;
	master = master_;

	LearningMidi = master->LearningMidi;
	midiRL = master->theVST->midiRL;
}

Fl_Double_Window* MidiLearnUI::make_window() {
  { midilearn = new Fl_Double_Window(658, 646, "Midi Learn System");
    midilearn->user_data((void*)(this));
    { scrollbox = new Fl_Scroll(20, 70, 620, 560, "Acquired Controls");
	  //partuigroup->box(FL_ENGRAVED_FRAME);
	  scrollbox->box(FL_ENGRAVED_FRAME);
	  scrollbox->type(2); //vertical	  
	  //scrollbox->type (2);
	  { Fl_Pack* o = new Fl_Pack(20, 75, 610, 535);
       
	  
			/*CompData* cd = new CompData();
			cd->ch = 1;
			char* strDesc = new char[40];
			sprintf(strDesc,"Fuckin Description");
			cd->description = strDesc;
			cd->min = 0;
			cd->max = 127;*/
	  
			cpack = o;
			/*components[nComp] = new ComponentUI(0,0,465,28);	
			components[nComp]->init (cd);
			
			components[nComp]->deactivate ();*/

			nComp++;
			//components[nComp]->make_window();			
			//components[nComp]->comp->end();
			//components[nComp]->comp->show();

			/*for (int i=0;i<128;i++)
			{
				h[i]=new Oscilharmonic(0,0,20,o->h(),"");
				h[i]->init(oscil,i,oscildisplaygroup,oldosc,cbwidget,applybutton,master);
			}*/
       
		
	  
	  o->end();
      } // Fl_Pack* o

      scrollbox->end();
    } // Fl_Scroll* scrollbox
    { Fl_Box* o = new Fl_Box(15, 10, 270, 35, "ZynAddSubFx Midi Learn");
      o->labelfont(14);
      o->labelsize(18);
    } // Fl_Box* o
	{ Fl_Box* o = new Fl_Box(260, 20, 55, 25, "by  VDX");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(8);
    } // Fl_Box* o
    { cmdAcquire = new Fl_Button(535, 15, 90, 30, "Acquire ");
      cmdAcquire->tooltip("Acquire Midi");
      cmdAcquire->box(FL_PLASTIC_UP_BOX);
      cmdAcquire->color((Fl_Color)6);
      cmdAcquire->selection_color((Fl_Color)23);
      cmdAcquire->callback((Fl_Callback*)cb_cmdAcquire);
    } // Fl_Button* cmdAcquire
    { cmdOK = new Fl_Button(430, 15, 80, 30, "Apply");
      cmdOK->box(FL_PLASTIC_UP_BOX);
      cmdOK->color((Fl_Color)1);
      cmdOK->callback((Fl_Callback*)cb_cmdOK);
    } // Fl_Button* cmdOK
	{ lblAcq = new Fl_Box(65, 240, 545, 85, "Acquiring Control...");
      lblAcq->labeltype(FL_ENGRAVED_LABEL);
      lblAcq->labelfont(3);
      lblAcq->labelsize(56);
      lblAcq->labelcolor(FL_INACTIVE_COLOR);
      lblAcq->when(FL_WHEN_NEVER);
    } // Fl_Box* lblAcq
    { lblAcq2 = new Fl_Box(120, 325, 430, 40, "Please click on a control to add it to the list");
      lblAcq2->labeltype(FL_ENGRAVED_LABEL);
      lblAcq2->labelsize(21);
      lblAcq2->labelcolor((Fl_Color)121);
    } // Fl_Box* lblAcq2

	 { Fl_Check_Button* o = chkTurbo = new Fl_Check_Button(15, 45, 25, 25, "Turbo Mode");
      o->down_box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)cb_chkTurbo);
      o->when(FL_WHEN_CHANGED);
    }
    { Fl_Check_Button* o = chkMultiCh = new Fl_Check_Button(130, 45, 25, 25, "Multi Channel");
      o->down_box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)cb_chkMultiCh);
      o->when(FL_WHEN_CHANGED);
    }

    midilearn->end();
  } // Fl_Double_Window* midilearn
  lblAcq->clear_visible();
  lblAcq2->clear_visible();
  return midilearn;
}

Fl_Group* ComponentUI::make_window() {
  { comp = new Fl_Group(0, 0, 602, 27);
    comp->box(FL_FLAT_BOX);
    comp->color(FL_BACKGROUND_COLOR);
    comp->selection_color(FL_BACKGROUND_COLOR);
    comp->labeltype(FL_NO_LABEL);
    comp->labelfont(0);
    comp->labelsize(14);
    comp->labelcolor(FL_FOREGROUND_COLOR);
    comp->user_data((void*)(this));
    comp->align(FL_ALIGN_TOP);
    comp->when(FL_WHEN_RELEASE);
    { txtDescription = new Fl_Output(150, 0, 315, 25);
      txtDescription->callback((Fl_Callback*)cb_txtDescription);
    } // Fl_Output* txtDescription
    { txtCh = new Fl_Input(50, 0, 30, 25, "CH");
      txtCh->callback((Fl_Callback*)cb_txtCh);
      txtCh->when(FL_WHEN_CHANGED);
    } // Fl_Input* txtCh
    { txtMin = new Fl_Input(490, 0, 35, 25, "Min");
      txtMin->callback((Fl_Callback*)cb_txtMin);
      txtMin->when(FL_WHEN_CHANGED);
    } // Fl_Input* txtMin
    { txtMax = new Fl_Input(560, 0, 40, 25, "Max");
      txtMax->callback((Fl_Callback*)cb_txtMax);
      txtMax->when(FL_WHEN_CHANGED);
    } // Fl_Input* txtMax
    { txtCtrl = new Fl_Input(105, 0, 35, 25, "Ctrl");
      txtCtrl->callback((Fl_Callback*)cb_txtCtrl);
      txtCtrl->when(FL_WHEN_CHANGED);
    } // Fl_Input* txtCtrl
    { chkEnable = new Fl_Check_Button(5, 0, 20, 25);
      chkEnable->tooltip("Enable");
      chkEnable->down_box(FL_DOWN_BOX);
      chkEnable->callback((Fl_Callback*)cb_chkEnable);
    } // Fl_Check_Button* chkEnable

	char* mystr1 = new char[30];
	char* mystr2 = new char[30];
	char* mystr3 = new char[30];
	char* mystr4 = new char[30];
	txtDescription->value((const char*)compdata->description);
	txtCh->value((const char*)itoa(compdata->ch,mystr1,10));	
	txtCtrl->value((const char*)itoa(compdata->ctrl,mystr4,10));
	
	
	chkEnable->value(compdata->en);
	
	
	//float stuff
	sprintf(mystr2,"%5.3f",compdata->min);
	txtMin->value((const char*)mystr2);
	sprintf(mystr3,"%5.3f",compdata->max);
	txtMax->value((const char*)mystr3);
	


    comp->end();
  } // Fl_Group* comp
  return comp;
}


void ComponentUI::init(CompData *compdata_) {
	midilearnui->changed(1); //make red button
	compdata = compdata_;
	enabled = 1;
	make_window();
	end();
	show();
	
}

void ComponentUI::update(CompData *compdata_){

	if (compdata) delete compdata;
	compdata = compdata_;

	char* mystr1 = new char[30];
	char* mystr2 = new char[30];
	char* mystr3 = new char[30];
	char* mystr4 = new char[30];
	txtDescription->value((const char*)compdata->description);
	txtCh->value((const char*)itoa(compdata->ch,mystr1,10));
	//txtMin->value((const char*)itoa(compdata->min,mystr2,10));
	//txtMax->value((const char*)itoa(compdata->max,mystr3,10));
	txtCtrl->value((const char*)itoa(compdata->ctrl,mystr4,10));

	//float stuff
	sprintf(mystr2,"%5.3f",compdata->min);
	txtMin->value((const char*)mystr2);
	sprintf(mystr3,"%5.3f",compdata->max);
	txtMax->value((const char*)mystr3);

}


int ComponentUI::GetCh(){		
	int newch = atoi(txtCh->value());
	return newch;
}

int ComponentUI::GetCtrl() {
	int newctrl = atoi(txtCtrl->value());
	return newctrl;
}

int ComponentUI::GetEnabled() {
	return enabled;
}

float ComponentUI::GetMin() {	
	float newmin = (float)atof(txtMin->value());
	return newmin;
}

float ComponentUI::GetMax() {
	float newmax = (float)atof(txtMax->value());
	return newmax;
}


void ComponentUI::cb_txtDescription_i(Fl_Output*, void*) {
  //clicked on description;
	//midilearnui->changed(1); //make red button
	midilearnui->Acquire();

	//use this here space to replace the stuff
	midiRL->updating = 1;
	midiRL->updn = compdata->n;
	fl_alert("Please select a control to replace the current one...");
	*LearningMidi = 1;
}
void ComponentUI::cb_txtDescription(Fl_Output* o, void* v) {
  ((ComponentUI*)(o->parent()->user_data()))->cb_txtDescription_i(o,v);
}

void ComponentUI::cb_txtCh_i(Fl_Input* o, void*) {
  //txtCH_changed();
	int newch;
	char* mystr = new char[3];

	midilearnui->changed(1); //make red button
	
	newch = atoi(o->value());
	//fl_alert("New Channel is now: %d",newch);

	if (newch < 1)		
	    o->value((const char*)itoa(1,mystr,10));

	if (newch > 16)
		o->value((const char*)itoa(16,mystr,10));

	delete [] mystr;
}
void ComponentUI::cb_txtCh(Fl_Input* o, void* v) {
  ((ComponentUI*)(o->parent()->user_data()))->cb_txtCh_i(o,v);
}

void ComponentUI::cb_txtMin_i(Fl_Input* o, void*) {
  //txtMin_changed();
	float newmin;
	char* mystr = new char[50];

	midilearnui->changed(1); //make red button
	
	newmin = (float)atof(o->value());

	if (newmin < compdata->min)
	{	//format float to %5.3f
		sprintf(mystr,"%5.3f",compdata->minmin);
		o->value(mystr);
	}

	if (newmin > compdata->max)
	{	sprintf(mystr,"%5.3f",compdata->maxmax);
		o->value(mystr);
	}
	
	delete [] mystr;

}
void ComponentUI::cb_txtMin(Fl_Input* o, void* v) {
  ((ComponentUI*)(o->parent()->user_data()))->cb_txtMin_i(o,v);
}

void ComponentUI::cb_txtMax_i(Fl_Input* o, void*) {
  //txtMax_changed();
	float newmin;
	char* mystr = new char[50];
	
	midilearnui->changed(1); //make red button

	newmin = (float)atof(o->value());

	if (newmin < compdata->minmin)
	{	//format float to %5.3f
		sprintf(mystr,"%5.3f",compdata->minmin);
		o->value(mystr);
	}

	if (newmin > compdata->maxmax)
	{	sprintf(mystr,"%5.3f",compdata->maxmax);
		o->value(mystr);
	}
	
	delete [] mystr;
	

}
void ComponentUI::cb_txtMax(Fl_Input* o, void* v) {
  ((ComponentUI*)(o->parent()->user_data()))->cb_txtMax_i(o,v);
}

void ComponentUI::cb_txtCtrl_i(Fl_Input* o, void*) {
  //txtCtrl_changed();
	int newctrl;
	char* mystr = new char[4];

	midilearnui->changed(1); //make red button

	newctrl = atoi(o->value());
	//fl_alert("New Channel is now: %d",newch);

	if (newctrl < 0)
		 o->value((const char*)itoa(0,mystr,10));

	if (newctrl > 127)
		o->value((const char*)itoa(127,mystr,10));

}
void ComponentUI::cb_txtCtrl(Fl_Input* o, void* v) {
  ((ComponentUI*)(o->parent()->user_data()))->cb_txtCtrl_i(o,v);
}

void ComponentUI::SetEnable(int en){

	if(en)
	{
		//enable the stuff
		txtDescription->activate();
		txtCh->activate();
		txtMin->activate();
		txtMax->activate();
		txtCtrl->activate();
		enabled = 1;
	}
	else
	{
		//disable the stuff
		txtDescription->deactivate();
		txtCh->deactivate();
		txtMin->deactivate();
		txtMax->deactivate();
		txtCtrl->deactivate();
		enabled = 0;		
	}

}

void ComponentUI::cb_chkEnable_i(Fl_Check_Button* o, void*) {
  //clicked on enable;
	midilearnui->changed(1); //make red button
	if(o->value())
	{
		//enable the stuff
		txtDescription->activate();
		txtCh->activate();
		txtMin->activate();
		txtMax->activate();
		txtCtrl->activate();
		enabled = 1;
	}
	else
	{
		//disable the stuff
		txtDescription->deactivate();
		txtCh->deactivate();
		txtMin->deactivate();
		txtMax->deactivate();
		txtCtrl->deactivate();
		enabled = 0;		
	}

}
void ComponentUI::cb_chkEnable(Fl_Check_Button* o, void* v) {
  ((ComponentUI*)(o->parent()->user_data()))->cb_chkEnable_i(o,v);
}
