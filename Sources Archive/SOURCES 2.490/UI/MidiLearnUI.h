// generated by Fast Light User Interface Designer (fluid) version 1.0108
// edited by VDX

#ifndef MidiLearnUI_h

#define MidiLearnUI_h

class MidiRL;


#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "../globals.h"
#include "../Misc/Master.h"
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Pack.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_ask.h>

#include "../Misc/ParamID.h"


//#include <FL/Fl_Slider.H>
//#include <FL/Fl_Choice.H>
//#include <FL/Fl_Check_Button.H>
class CompData {
public:
	CompData();
  int ch;
  int ctrl;
  char* description;
  float min;
  float max;
  float minmin;
  float maxmax;
  int n;
  int en;
};


//MidiRL* midiRL;

class MidiLearnUI;

class ComponentUI : public Fl_Group{
  Fl_Group* make_window();
  
  
public:
  ComponentUI(MidiLearnUI* midileanui_,Master* master_, int x,int y, int w, int h, const char *label=0);
  int* LearningMidi;
  MidiRL* midiRL;
  Master* master;
  Fl_Group *comp;
  
  void init(CompData* compdata_);
  void update(CompData* compdata_);
  void SetEnable(int en);
  

  int GetCh();
  int GetCtrl();
  int GetEnabled();
  float GetMin();
  float GetMax();
  
public:
  Fl_Output *txtDescription;
private:
  void cb_txtDescription_i(Fl_Output*, void*);
  static void cb_txtDescription(Fl_Output*, void*);
public:
  Fl_Input *txtCh;
private:
  void cb_txtCh_i(Fl_Input*, void*);
  static void cb_txtCh(Fl_Input*, void*);
public:
  Fl_Input *txtMin;
private:
  void cb_txtMin_i(Fl_Input*, void*);
  static void cb_txtMin(Fl_Input*, void*);
public:
  Fl_Input *txtMax;
private:
  void cb_txtMax_i(Fl_Input*, void*);
  static void cb_txtMax(Fl_Input*, void*);
public:
  Fl_Input *txtCtrl;
private:
  void cb_txtCtrl_i(Fl_Input*, void*);
  static void cb_txtCtrl(Fl_Input*, void*);
public:
  Fl_Check_Button *chkEnable;
private:
  void cb_chkEnable_i(Fl_Check_Button*, void*);
  static void cb_chkEnable(Fl_Check_Button*, void*);



private:
  //int x, int y;
  CompData* compdata;
  int enabled;
  MidiLearnUI* midilearnui;
};

class MidiLearnUI {
public:
	int* LearningMidi;
  MidiRL* midiRL;
  MidiLearnUI(Master *master);
  ~MidiLearnUI();
  Fl_Double_Window* make_window();
  Fl_Double_Window *midilearn;
  Fl_Scroll *scrollbox;
  Fl_Button *cmdAcquire;
private:
  void cb_cmdAcquire_i(Fl_Button*, void*);
  static void cb_cmdAcquire(Fl_Button*, void*);
public:
  Fl_Button *cmdOK;
  ComponentUI* components[256];
private:
  void cb_cmdOK_i(Fl_Button*, void*);
  static void cb_cmdOK(Fl_Button*, void*);

  Fl_Pack* cpack;
  int ycrt;
public:	
  Fl_Box *lblAcq;
  Fl_Box *lblAcq2;

 
  Fl_Check_Button *chkTurbo;
private:
  inline void cb_chkTurbo_i(Fl_Check_Button*, void*);
  static void cb_chkTurbo(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *chkMultiCh;
private:
  inline void cb_chkMultiCh_i(Fl_Check_Button*, void*);
  static void cb_chkMultiCh(Fl_Check_Button*, void*);

public:
  void show();
  void hide();
  void AddComponent(ParamID* parID);
  void AddComponentComplete(ParamID* parID);
  void UpdateComponent(ParamID *parID, int n);
  void cleanup();
  void Acquire();
  void refresh();



  void SetTurbo();
  void ClearTurbo();
  void SetMultiCh();
  void ClearMultiCh();


  void changed(int color);

private:
  Master *master;
  int nComp;

};



#endif
